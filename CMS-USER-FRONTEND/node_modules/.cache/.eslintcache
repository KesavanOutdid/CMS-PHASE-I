<<<<<<< HEAD
[{"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\index.js":"1","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\App.js":"2","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\components\\Register.jsx":"3","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\components\\Login.jsx":"4","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\PaymentSuccess.jsx":"5","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\PaymentUnsuccess.jsx":"6","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\Home.jsx":"7","F:\\Github\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\Home.jsx":"8"},{"size":174,"mtime":1707125574842,"results":"9","hashOfConfig":"10"},{"size":2209,"mtime":1707125574841,"results":"11","hashOfConfig":"10"},{"size":4289,"mtime":1707221212228,"results":"12","hashOfConfig":"10"},{"size":4826,"mtime":1707221212228,"results":"13","hashOfConfig":"10"},{"size":1251,"mtime":1707221212231,"results":"14","hashOfConfig":"10"},{"size":1269,"mtime":1707221212232,"results":"15","hashOfConfig":"10"},{"size":33063,"mtime":1707225231197,"results":"16","hashOfConfig":"10"},{"size":33063,"mtime":1707282060099,"results":"17","hashOfConfig":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1h7y826",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1fg3urb","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\index.js",[],[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\App.js",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\components\\Register.jsx",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\components\\Login.jsx",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\PaymentSuccess.jsx",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\PaymentUnsuccess.jsx",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\Home.jsx",["44","45","46","47"],[],"F:\\Github\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\Home.jsx",["48","49","50","51"],[],{"ruleId":"52","severity":1,"message":"53","line":13,"column":10,"nodeType":"54","messageId":"55","endLine":13,"endColumn":19},{"ruleId":"56","severity":1,"message":"57","line":32,"column":6,"nodeType":"58","endLine":32,"endColumn":24,"suggestions":"59"},{"ruleId":"56","severity":1,"message":"60","line":226,"column":6,"nodeType":"58","endLine":226,"endColumn":25,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":236,"column":9,"nodeType":"64","messageId":"65","endLine":318,"endColumn":8},{"ruleId":"52","severity":1,"message":"53","line":13,"column":10,"nodeType":"54","messageId":"55","endLine":13,"endColumn":19},{"ruleId":"56","severity":1,"message":"57","line":32,"column":6,"nodeType":"58","endLine":32,"endColumn":24,"suggestions":"66"},{"ruleId":"56","severity":1,"message":"60","line":226,"column":6,"nodeType":"58","endLine":226,"endColumn":25,"suggestions":"67"},{"ruleId":"62","severity":1,"message":"63","line":236,"column":9,"nodeType":"64","messageId":"65","endLine":318,"endColumn":8},"no-unused-vars","'timeoutId' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleSearchBox'. Either include it or remove the dependency array.","ArrayExpression",["68"],"React Hook useEffect has a missing dependency: 'RcdMsg'. Either include it or remove the dependency array.",["69"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["70"],["71"],{"desc":"72","fix":"73"},{"desc":"74","fix":"75"},{"desc":"72","fix":"76"},{"desc":"74","fix":"77"},"Update the dependencies array to be: [handleSearchBox, isTimeoutRunning]",{"range":"78","text":"79"},"Update the dependencies array to be: [ChargerID, RcdMsg, socket]",{"range":"80","text":"81"},{"range":"82","text":"79"},{"range":"83","text":"81"},[1207,1225],"[handleSearchBox, isTimeoutRunning]",[7836,7855],"[ChargerID, RcdMsg, socket]",[1207,1225],[7836,7855]]
=======
[{"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\index.js":"1","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\App.js":"2","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\components\\Register.jsx":"3","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\components\\Login.jsx":"4","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\PaymentSuccess.jsx":"5","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\PaymentUnsuccess.jsx":"6","D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\Home.jsx":"7"},{"size":174,"mtime":1707125574842,"results":"8","hashOfConfig":"9"},{"size":2209,"mtime":1707125574841,"results":"10","hashOfConfig":"9"},{"size":4289,"mtime":1707221212228,"results":"11","hashOfConfig":"9"},{"size":4826,"mtime":1707221212228,"results":"12","hashOfConfig":"9"},{"size":1251,"mtime":1707221212231,"results":"13","hashOfConfig":"9"},{"size":1269,"mtime":1707221212232,"results":"14","hashOfConfig":"9"},{"size":33063,"mtime":1707225231197,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1h7y826",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\index.js",[],[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\App.js",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\components\\Register.jsx",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\components\\Login.jsx",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\PaymentSuccess.jsx",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\PaymentUnsuccess.jsx",[],[],"D:\\Vivek\\GIT\\CMS-PHASE-I\\CMS-USER-FRONTEND\\src\\pages\\Home.jsx",["39","40","41","42"],[],"import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst Home = ({ userInfo, handleLogout }) => {\r\n  const [data, setData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [walletBalance, setWalletBalance] = useState(null);\r\n  const [searchChargerID, setChargerID] = useState('');\r\n  const [ChargerID, setSearchChargerID] = useState('');\r\n  const Username = userInfo.username;\r\n\r\n  const [timeoutId, setTimeoutId] = useState(null);\r\n  const [isTimeoutRunning, setIsTimeoutRunning] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    if (isTimeoutRunning) {\r\n      // Start the timeout when isTimeoutRunning is true\r\n      const id = setTimeout(() => {\r\n        // Your timeout logic here\r\n        handleSearchBox();\r\n        setShowAlerts('Timeout, Please re-initiate the charger !');\r\n        stopTimeout();\r\n      }, 45000); // Example: 5 seconds delay\r\n\r\n      // Update timeoutId state with the ID returned by setTimeout\r\n      setTimeoutId(id);\r\n\r\n      // Cleanup function to stop the timeout when component unmounts or isTimeoutRunning becomes false\r\n      return () => clearTimeout(id);\r\n    }\r\n  }, [isTimeoutRunning]); // useEffect will re-run whenever isTimeoutRunning changes\r\n\r\n  const startTimeout = () => {\r\n    setIsTimeoutRunning(true); // Start the timeout by setting isTimeoutRunning to true\r\n  };\r\n\r\n  const stopTimeout = () => {\r\n    setIsTimeoutRunning(false); // Stop the timeout by setting isTimeoutRunning to false\r\n  };\r\n\r\n  const EndChargingSession = async (ChargerID) => {\r\n    try{\r\n      const response = await fetch(`/endChargingSession?ChargerID=${ChargerID}`);\r\n      const data = await response.json();\r\n      console.log(data);\r\n    }catch(error){\r\n      console.error('Error End Charging Session:', error);\r\n    }\r\n  }\r\n  \r\n  // Show error history (toggle button) \r\n  const [isTableVisible, setIsTableVisible] = useState(false);\r\n  const toggleTableVisibility = () => {\r\n    setIsTableVisible(!isTableVisible);\r\n  };\r\n\r\n  // Get user wallet balance\r\n  const fetchWallletBal = async (username) => {\r\n    try {\r\n      const response = await fetch(`/GetWalletBalance?username=${username}`);\r\n      const data = await response.json();\r\n      setWalletBalance(data.balance);\r\n    } catch (error) {\r\n      console.error('Error fetching wallet balance:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWallletBal(Username);\r\n  }, [Username]);\r\n  \r\n \r\n  // Function to handle the \"Back\" button click\r\n  async function handleSearchBox() {\r\n\r\n    setChargerID('');\r\n    setSearchChargerID('');\r\n    // Show the searchBoxSection\r\n    document.getElementById('searchBoxSection').style.display = 'block';\r\n    // Hide the statusSection (if needed)\r\n    document.getElementById('statusSection').style.display = 'none';\r\n    // Hide the \"Back\" button\r\n    document.getElementById('backSection').style.display = 'none';\r\n\r\n    await EndChargingSession(ChargerID);\r\n  }\r\n\r\n  // Alert message (error)\r\n  const [errorData, setShowAlerts] = useState(false);\r\n  const closeAlert = () => {\r\n    setShowAlerts(false);\r\n  };\r\n\r\n  // Search charger Id\r\n  const handleSearchRequest = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const response = await fetch('/SearchCharger', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n          body: JSON.stringify({ searchChargerID, Username }),\r\n        });\r\n \r\n        if (response.ok) {\r\n          setSearchChargerID(searchChargerID);\r\n          // Hide Search Box Section and show Status Section\r\n          document.getElementById('searchBoxSection').style.display = 'none';\r\n          document.getElementById('statusSection').style.display = 'block';\r\n          document.getElementById('backSection').style.display = 'block';\r\n          // Additional logic or state updates can be added here\r\n          setIsTableVisible(false);\r\n          FetchLaststatus(searchChargerID);\r\n        } else {\r\n          const errorData = await response.json();\r\n          // alert(errorData.message);\r\n          setShowAlerts(errorData.message);\r\n          // Show Search Box Section and hide Status Section\r\n          document.getElementById('searchBoxSection').style.display = 'block';\r\n          document.getElementById('statusSection').style.display = 'none';\r\n          document.getElementById('backSection').style.display = 'none';\r\n\r\n          // Additional logic or state updates can be added here\r\n          setIsTableVisible(false);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n        // Show Search Box Section and hide Status Section in case of an error\r\n        document.getElementById('searchBoxSection').style.display = 'block';\r\n        document.getElementById('statusSection').style.display = 'none';\r\n        document.getElementById('backSection').style.display = 'none';\r\n\r\n        // Additional logic or state updates can be added here\r\n        setIsTableVisible(false);\r\n      }\r\n  };\r\n\r\n  const [ChargerStatus, setChargerStatus] = useState('');\r\n  const [timestamp, setTimestamp] = useState('');\r\n  const [checkFault, setCheckFault] = useState(false);\r\n  const [historys, setHistory] = useState([]);\r\n  const [voltage, setVoltage] = useState(0);\r\n  const [current, setCurrent] = useState(0);\r\n  const [power, setPower] = useState(0);\r\n  const [energy, setEnergy] = useState(0);\r\n  const [frequency, setFrequency] = useState(0);\r\n  const [temperature, setTemperature] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const textBox = document.getElementById('chargerID');\r\n\r\n    if (!ChargerID) {\r\n      const appendedValue = 'Please enter a valid URL';\r\n      textBox.value += appendedValue;\r\n    } else {\r\n      textBox.value += ChargerID;\r\n    }\r\n  }, [ChargerID]);\r\n\r\n  // Last status\r\n  async function FetchLaststatus(ChargerID){\r\n    try {\r\n      const response = await fetch('/FetchLaststatus', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ id: ChargerID }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const status = data.message.status;\r\n        const formattedTimestamp = formatTimestamp(data.message.timestamp);\r\n        if(status === 'Available'){\r\n           startTimeout();\r\n        }\r\n        setChargerStatus(status);\r\n        setTimestamp(formattedTimestamp);\r\n        AppendStatusTime(status, formattedTimestamp);\r\n      } else {\r\n        console.error(`Failed to fetch status. Status code: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n       console.error(`Error while fetching status: ${error.message}`);\r\n    }\r\n  };\r\n \r\n  const [socket, setSocket] = useState(null);\r\n\r\n  // Effect to handle WebSocket connection\r\n  useEffect(() => {\r\n    // Check if the socket is not already open and ChargerID is provided\r\n    if (!socket && ChargerID) {\r\n      const newSocket = new WebSocket('ws://122.166.210.142:8050');\r\n\r\n      newSocket.addEventListener('open', (event) => {\r\n        console.log('WebSocket connection opened:', event);\r\n      });\r\n\r\n      newSocket.addEventListener('message', (response) => {\r\n        const parsedMessage = JSON.parse(response.data);\r\n        RcdMsg(parsedMessage);\r\n      });\r\n\r\n      newSocket.addEventListener('close', (event) => {\r\n        console.log('WebSocket connection closed:', event);\r\n      });\r\n\r\n      newSocket.addEventListener('error', (event) => {\r\n        console.error('WebSocket error:', event);\r\n      });\r\n\r\n      // Set the socket state\r\n      setSocket(newSocket);\r\n    }\r\n    // Cleanup function to close the WebSocket when the component is unmounted\r\n    return () => {\r\n      if (socket) {\r\n        socket.close();\r\n        setSocket(null);\r\n      }\r\n    };\r\n  }, [ChargerID, socket]);\r\n\r\n  // WebSocket event listener message (all data)\r\n  function RcdMsg(parsedMessage){\r\n    let ChargerStatus;\r\n    let CurrentTime;\r\n    let errorCode;\r\n    let user = Username;\r\n    const { DeviceID, message } = parsedMessage;\r\n      if (DeviceID === ChargerID) {\r\n        switch (message[2]) {\r\n          case 'StatusNotification':\r\n            ChargerStatus = message[3].status;\r\n            CurrentTime = formatTimestamp(message[3].timestamp);\r\n            errorCode = message[3].errorCode;\r\n            console.log(`ChargerID ${DeviceID}: {\"status\": \"${ChargerStatus}\",\"time\": \"${CurrentTime}\",\"error\": \"${errorCode}\"}`);\r\n            if(ChargerStatus === 'Preparing'){\r\n              stopTimeout();\r\n            }\r\n            if(ChargerStatus === 'Available'){\r\n              startTimeout();\r\n            }\r\n            // Update state variables to maintain the history\r\n            if (errorCode !== 'NoError') {\r\n              setHistory((historys) => [\r\n                ...historys,\r\n                {\r\n                  serialNumber: historys.length + 1,\r\n                  currentTime: CurrentTime,\r\n                  chargerStatus: ChargerStatus,\r\n                  errorCode: errorCode,\r\n                },\r\n              ]);\r\n              setCheckFault(true);\r\n            } else {\r\n              setCheckFault(false);\r\n            }\r\n          break;\r\n\r\n        case 'Heartbeat':\r\n          CurrentTime = getCurrentTime();\r\n          setTimestamp(CurrentTime);\r\n        break;\r\n\r\n        case 'MeterValues':\r\n          const meterValues = message[3].meterValue;\r\n          const sampledValue = meterValues[0].sampledValue;\r\n          const formattedJson = convertToFormattedJson(sampledValue);\r\n\r\n          // You can use state to store these values and update the state\r\n          const updatedValues = {\r\n            voltage: formattedJson['Voltage'],\r\n            current: formattedJson['Current.Import'],\r\n            power: formattedJson['Power.Active.Import'],\r\n            energy: formattedJson['Energy.Active.Import.Register'],\r\n            frequency: formattedJson['Frequency'],\r\n            temperature: formattedJson['Temperature'],\r\n          };\r\n          setChargerStatus('Charging');\r\n          setTimestamp(getCurrentTime());\r\n          setVoltage(updatedValues.voltage);\r\n          setCurrent(updatedValues.current);\r\n          setPower(updatedValues.power);\r\n          setEnergy(updatedValues.energy);\r\n          setFrequency(updatedValues.frequency);\r\n          setTemperature(updatedValues.temperature);\r\n            console.log(`{ \"V\": ${updatedValues.voltage},\"A\": ${updatedValues.current},\"W\": ${updatedValues.power},\"Wh\": ${updatedValues.energy},\"Hz\": ${updatedValues.frequency},\"Kelvin\": ${updatedValues.temperature}}`);\r\n        break;\r\n\r\n        case 'Authorize':\r\n          if (checkFault === false) {\r\n            ChargerStatus = 'Authorized';\r\n          }\r\n          CurrentTime = getCurrentTime();\r\n        break;\r\n\r\n        case 'FirmwareStatusNotification':\r\n          ChargerStatus = message[3].status.toUpperCase();\r\n        break;\r\n\r\n        case 'StopTransaction':\r\n          ChargerStatus = 'Finishing';\r\n          CurrentTime = getCurrentTime();\r\n          setTimeout(function () {\r\n            updateSessionPriceToUser(ChargerID, user);\r\n          }, 5000);\r\n        break;\r\n\r\n        case 'Accepted':\r\n          ChargerStatus = 'ChargerAccepted';\r\n          CurrentTime = getCurrentTime();\r\n          break;\r\n      }\r\n    }\r\n    if (ChargerStatus) {\r\n      AppendStatusTime(ChargerStatus, CurrentTime);\r\n    }\r\n  }\r\n\r\n  // Get current time\r\n  const getCurrentTime = () => {\r\n    const currentDate = new Date();\r\n    const currentTime = currentDate.toISOString();\r\n    return formatTimestamp(currentTime);\r\n  };\r\n\r\n  const formatTimestamp = (originalTimestamp) => {\r\n    const date = new Date(originalTimestamp);\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const year = date.getFullYear();\r\n    const hours = String(date.getHours()).padStart(2, '0');\r\n    const minutes = String(date.getMinutes()).padStart(2, '0');\r\n    const seconds = String(date.getSeconds()).padStart(2, '0');\r\n    return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;\r\n  };\r\n\r\n  // Function to convert the structure\r\n  const convertToFormattedJson = (measurandArray) => {\r\n    const formattedJson = {};\r\n    measurandArray.forEach(measurandObj => {\r\n      const key = measurandObj.measurand;\r\n      const value = measurandObj.value;\r\n      formattedJson[key] = value;\r\n    });\r\n    return formattedJson;\r\n  };\r\n\r\n   // start button\r\n   const handleStartTransaction = async () => {\r\n    try {\r\n      const response = await fetch('/start', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ id: ChargerID, user: Username }),\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const data = await response.json();\r\n        console.log('ChargerStartInitiated');\r\n        console.log(data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error.message);\r\n    }\r\n  };\r\n\r\n  // stop button\r\n  const handleStopTransaction = async () => {\r\n    try {\r\n      const response = await fetch('/stop', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ id: ChargerID }),\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        const data = await response.json();\r\n        console.log('ChargerStopInitiated');\r\n        console.log(data.message);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error.message);\r\n    }\r\n  };\r\n\r\n  const AppendStatusTime = (ChargerStatus, CurrentTime) => {\r\n    setChargerStatus(ChargerStatus);\r\n    setTimestamp(CurrentTime);\r\n \r\n    const startButton = document.getElementById(\"startTransactionBtn\");\r\n    const stopButton = document.getElementById(\"stopTransactionBtn\");\r\n \r\n    // Enabling start button when ChargerStatus is 'Preparing'\r\n    startButton.disabled = ChargerStatus !== 'Preparing';\r\n \r\n    // Enabling stop button when ChargerStatus is 'Charging'\r\n    stopButton.disabled = ChargerStatus !== 'Charging';\r\n  };\r\n\r\n  const updateSessionPriceToUser = async (ChargerID, user) => {\r\n    try {\r\n      const response = await fetch('/getUpdatedCharingDetails', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          chargerID: ChargerID,\r\n          user: user,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        let chargingSession = data.value.chargingSession;\r\n        let updatedUser = data.value.user;\r\n        setApiData(chargingSession,updatedUser);\r\n        setSearchChargerID('');\r\n        setChargerID('');\r\n        document.getElementById('searchBoxSection').style.display = 'block';\r\n        document.getElementById('statusSection').style.display = 'none';\r\n        await fetchWallletBal(Username);\r\n        await EndChargingSession(Username);\r\n      } else {\r\n        // Log or handle error\r\n        console.error('Update failed:', response.statusText);\r\n      }\r\n    } catch (error) {\r\n      // Log or handle error\r\n      console.error('Update failed:', error.message);\r\n    }\r\n  };\r\n\r\n  // Alert message show\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [chargingSession, setChargingSession] = useState({});\r\n  const [updatedUser, setUpdatedUser] = useState({});\r\n\r\n  const setApiData = (chargerSession,uservalue) => {\r\n    console.log(uservalue);\r\n    setChargingSession(chargerSession);\r\n    setUpdatedUser(uservalue);\r\n    setShowAlert(true);\r\n  };\r\n\r\n  // Alert message close\r\n  const handleCloseAlert = () => {\r\n    setShowAlert(false);\r\n  };\r\n\r\n  // Get table data\r\n  useEffect(() => {\r\n    // Define the API URL based on the event detail\r\n    const url = `/GetAllChargerDetails`;\r\n    axios.get(url).then((res) => {\r\n        setData(res.data.value);\r\n        setLoading(false);\r\n    })\r\n       .catch((err) => {\r\n        console.error('Error fetching data:', err);\r\n        setError('Error fetching data. Please try again.');\r\n        setLoading(false);\r\n      });\r\n}, []);\r\n\r\n  return (\r\n    <div>\r\n      {/* Navbar */}\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n        <span className=\"navbar-brand\">EV Power</span>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n          <ul className=\"navbar-nav ml-auto\">\r\n            <li className=\"nav-item\">\r\n              <form className=\"form-inline\" onClick={handleLogout}>\r\n                <button type=\"button\" className=\"btn btn-danger\">Logout</button>\r\n              </form>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n      {/* Container for Page welcome session start */}\r\n      <div className=\"container mt-4\">\r\n        <div className=\"col-md-12\">\r\n          <blockquote className=\"blockquote\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6 mb-2\">\r\n                <h2 style={{ paddingTop: '10px' }}>\r\n                  <strong>Welcome </strong> <span className=\"text-primary\">{Username},</span>\r\n                </h2>\r\n              </div>\r\n              <div className=\"col-md-6 mb-2 pr-3\">\r\n                <button type=\"submit\" className=\" button-90 float-end\" id=\"backSection\" style={{ display: 'none' }} onClick={handleSearchBox}>Back</button>\r\n              </div>\r\n            </div>\r\n          </blockquote>\r\n        </div>\r\n      </div>\r\n     \r\n      <div className=\"container mt-4\">\r\n        {/* Wallet Section start */}\r\n        <div className=\"col-md-12\" >\r\n          <blockquote className=\"blockquote\">\r\n            <div className=\"card mb-4\">\r\n              <div className=\"card-body\">\r\n                <div className=\"container\" style={{textAlign:'center'}}>\r\n                  <div className=\"row justify-content-around\">\r\n                    <div className=\"col-12 col-sm-4\">\r\n                        <div className=\"container mt-3\">\r\n                          <h2 className=\"card-title\">My Wallet</h2>\r\n                          <div>\r\n                            {walletBalance !== null ? (\r\n                              <p>Available balance: Rs. {walletBalance}</p>\r\n                            ) : (\r\n                              <p>Loading wallet balance...</p>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4\">\r\n                      <div className=\"container mt-3\">\r\n                        <h2 className=\"card-title\">Recharge Wallet</h2>\r\n                        <form action=\"http://122.166.210.142:8052/pay\" method=\"get\" className=\"d-flex flex-column\">\r\n                          <div className=\"d-flex justify-content-center\">\r\n                            <button type=\"submit\" value=\"500\" name=\"amount\" className=\"button-45 mr-2\">Rs.500</button>\r\n                            <button type=\"submit\" value=\"1000\" name=\"amount\" className=\"button-45 mr-2\">Rs.1000</button>\r\n                            <button type=\"submit\" value=\"2000\" name=\"amount\" className=\"button-45\">Rs.2000</button>\r\n                          </div>\r\n                          <input type=\"text\" name=\"RCuser\" value={Username} style={{ display: 'none' }} readOnly/>\r\n                        </form>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </blockquote>\r\n        </div>\r\n        {/* Wallet Section end */}\r\n\r\n        {/* Charger Search Box and charger list table Section  start */}\r\n        <div id=\"searchBoxSection\">\r\n          <div className=\"col-md-12\" >\r\n            <blockquote className=\"blockquote\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h2 className=\"card-title\" style={{textAlign: 'center'}}>SEARCH DEVICE</h2>\r\n                  <form onSubmit={handleSearchRequest}>\r\n                    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\r\n                    <div className=\"form-group\" style={{ width: '50%', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\r\n                        <input type=\"text\" style={{textAlign: 'center'}} className=\"form-control\" id=\"chargerID\" name=\"chargerID\" value={searchChargerID} onChange={(e) => setChargerID(e.target.value)} placeholder=\"Enter DeviceID\" />\r\n                        <button type=\"submit\" className=\"button-90\" style={{marginTop: '10px'}}>Search</button>\r\n                      </div>                    \r\n                    </div>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </blockquote>\r\n          </div>\r\n          {/* charger list start */}\r\n          <div className=\"col-md-12\" >\r\n            <blockquote className=\"blockquote\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h2 className=\"card-title\">Charger list</h2>\r\n                  <div className=\"table-container\">\r\n                    <table className=\"table table-striped\" style={{textAlign:'center'}}>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Sl.No</th>\r\n                          <th>DeviceID</th>\r\n                          <th>Status</th>\r\n                          <th>Type</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {loading ? (\r\n                          <tr>\r\n                            <td colSpan=\"5\" style={{ marginTop: '50px', textAlign: 'center' }}>Loading...</td>\r\n                          </tr>\r\n                        ) : error ? (\r\n                          <tr>\r\n                            <td colSpan=\"5\" style={{ marginTop: '50px', textAlign: 'center' }}>Error: {error}</td>\r\n                          </tr>\r\n                        ) : (\r\n                          Array.isArray(data) && data.length > 0 ? (\r\n                            data.map((dataItem, index) => (\r\n                              <tr key={index}>\r\n                                <td>{index + 1}</td>\r\n                                <td>{dataItem.ChargerID ? (\r\n                                  <span>{dataItem.ChargerID}</span>\r\n                                ) : (\r\n                                  <span>-</span>\r\n                                )}\r\n                                </td>\r\n                                <td>{dataItem.ChargerTagID ? (\r\n                                  <span>{dataItem.ChargerTagID}</span>\r\n                                ) : (\r\n                                  <span>-</span>\r\n                                )}\r\n                                </td>\r\n                                <td>{dataItem.charger_type ? (\r\n                                  <span>{dataItem.charger_type}</span>\r\n                                ) : (\r\n                                  <span>-</span>\r\n                                )}\r\n                                </td>\r\n                              </tr>\r\n                            ))\r\n                          ) : (\r\n                            <tr>\r\n                              <td colSpan=\"5\" style={{ marginTop: '50px', textAlign: 'center' }}>No devices found.</td>\r\n                            </tr>\r\n                          )\r\n                        )}\r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </blockquote>\r\n          </div>\r\n        </div>\r\n        {/* Charger Search Box and charger list table Section end */}\r\n\r\n        {/* Charger status Section  start*/}\r\n        <div className=\"col-md-12\" id=\"statusSection\" style={{ display: 'none' }}>\r\n          <blockquote className=\"blockquote\">\r\n            <div className=\"card\">\r\n              <div className=\"card-body\">\r\n                <div style={{textAlign: 'center'}}>\r\n                  <h2 className=\"card-title text-primary\">CHARGER STATUS</h2>\r\n                  <h5>{ChargerStatus}</h5>\r\n                  <h5>{timestamp}</h5>\r\n                  <h5 className=\"text-primary\">{ChargerID}</h5>\r\n                </div>\r\n                <div className=\"container\" style={{ paddingTop:'20px' ,paddingBottom: '20px', textAlign: 'center'}}>\r\n                  <div className=\"row\">\r\n                    <div className=\"col-12 col-sm-4\">\r\n                      <div className=\"container mt-3\">\r\n                        <div className=\"card radius_bgColor\">\r\n                          <div className=\"card-body\"><strong>Voltage : </strong> <span>{voltage}</span></div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4\">\r\n                      <div className=\"container mt-3\">\r\n                        <div className=\"card radius_bgColor\">\r\n                          <div className=\"card-body\"><strong>Current : </strong> <span>{current}</span></div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4\">\r\n                      <div className=\"container mt-3\">\r\n                        <div className=\"card radius_bgColor\">\r\n                          <div className=\"card-body\"><strong>Power :</strong> <span>{power}</span></div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4\">\r\n                      <div className=\"container mt-3\">\r\n                        <div className=\"card radius_bgColor\">\r\n                          <div className=\"card-body\"><strong>Energy : </strong> <span>{energy}</span></div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4\">\r\n                      <div className=\"container mt-3\">\r\n                        <div className=\"card radius_bgColor\">\r\n                          <div className=\"card-body\"><strong>Frequency : </strong> <span>{frequency}</span></div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4\">\r\n                      <div className=\"container mt-3\">\r\n                        <div className=\"card radius_bgColor\">\r\n                          <div className=\"card-body\"><strong>Temperature : </strong> <span>{temperature}</span></div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"container\">\r\n                  <div className=\"row justify-content-around\" style={{textAlign:'center'}}>\r\n                    <div className=\"col-12 col-sm-5\">\r\n                      <div className=\"container mt-4\">\r\n                        <button type=\"submit\" className=\"btn btn-success \" onClick={handleStartTransaction} disabled={ChargerStatus !== 'Preparing'} id=\"startTransactionBtn\" style={{width:'40%', borderRadius: '20px'}}><b>Start</b></button>    \r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-5\">\r\n                      <div className=\"container mt-4\">\r\n                        <button type=\"submit\" className=\"btn btn-danger\" onClick={handleStopTransaction} disabled={ChargerStatus !== 'Charging'} id=\"stopTransactionBtn\" style={{width:'40%', borderRadius: '20px'}}><b>Stop</b></button>                        \r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div style={{textAlign: 'center', paddingTop:\"20px\"}}>\r\n                  <button type=\"submit\" className=\" button-90\" onClick={toggleTableVisibility}>\r\n                    <span>{isTableVisible ? 'Hide Error History' : 'Show Error History'}</span>\r\n                  </button>\r\n                </div>\r\n                {isTableVisible && (\r\n                  <div className=\"col-lg-12 grid-margin stretch-card\" style={{paddingTop:'20px'}}>\r\n                    <div className=\"card\">\r\n                      <div className=\"card-body\">\r\n                        <div className=\"table-container\">\r\n                          <table className=\"table table-striped\" style={{textAlign:'center'}}>\r\n                            <thead>\r\n                              <tr>\r\n                                <th>Sl.No</th>\r\n                                <th>Timestamp</th>\r\n                                <th>Status</th>\r\n                                <th>Error</th>\r\n                              </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                              {historys.map((entry) => (\r\n                                <tr key={entry.serialNumber}>\r\n                                  <td>{entry.serialNumber}</td>\r\n                                  <td>{entry.currentTime}</td>\r\n                                  <td>{entry.chargerStatus}</td>\r\n                                  <td>{entry.errorCode}</td>\r\n                                </tr>\r\n                              ))}\r\n                            </tbody>\r\n                          </table>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"col-md-12 grid-margin stretch-card\" style={{paddingTop:'20px'}}>\r\n                  <div className=\"\">\r\n                    <div className=\"card-body\">\r\n                      <div className=\"row\">\r\n                        <div className=\"col-12 card\" style={{backgroundColor:'rgb(232 239 96 / 67%)', borderRadius:'30px'}}>\r\n                          <div className=\"table-responsive\">\r\n                            <div className=\"danger\" style={{paddingLeft: '10px', paddingBottom:'5px', color: 'black'}}>\r\n                              <h4 style={{paddingTop:'20px'}}><u>THRESHOLD LEVEL:</u></h4>\r\n                              <p><strong>Voltage level : </strong> Input under voltage - 175V and below. &nbsp;&nbsp;&nbsp;Input over voltage - 270V and above.</p>\r\n                              <p><strong>Current :</strong> Over Current - 33A.</p>\r\n                              <p><strong>Frequency :</strong> Under frequency - 47HZ. &nbsp;&nbsp;&nbsp;Over frequency - 53HZ.</p>\r\n                              <p><strong>Temperature :</strong> Low Temperature - 0 °C. &nbsp;&nbsp;&nbsp; High Temperature - 58 °C.</p>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </blockquote>\r\n        </div>\r\n        {/* Charger status Section stop*/}\r\n      </div>\r\n        {/* Alert charger update Session Price To User start*/}\r\n        {showAlert && (\r\n          <div className=\"alert-overlay\">\r\n            <div className=\"alert success\" style={{width:'500px'}}>\r\n              <span className=\"alertClose\" onClick={handleCloseAlert}>X</span>\r\n              <span className=\"alertText\"><p><strong>ChargerID:</strong> {chargingSession.ChargerID}</p></span>\r\n              <span className=\"alertText\"><p><strong>Start Time:</strong> {chargingSession.StartTimestamp}</p></span>\r\n              <span className=\"alertText\"><p><strong>Stop Time:</strong> {chargingSession.StopTimestamp}</p></span>\r\n              <span className=\"alertText\"><p><strong>Unit Consumed:</strong> {chargingSession.Unitconsumed}</p></span>\r\n              <span className=\"alertText\"><p><strong>Charging Price:</strong> {chargingSession.price}</p></span>\r\n              <span className=\"alertText\"><p><strong>Available Balance:</strong> {updatedUser.walletBalance}</p></span>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {/* Alert charger update Session Price To User end*/}\r\n\r\n        {/* Alert message start */}\r\n        {errorData && (\r\n          <div className=\"alert alert-warning alert-dismissible fade show alert-container\" role=\"alert\" style={{width:'400px', textAlign:'center'}}>\r\n            <strong>{errorData}</strong> \r\n            <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick={closeAlert} style={{top:'7px'}}>\r\n              <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n        {/* Alert message end*/}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;",{"ruleId":"43","severity":1,"message":"44","line":13,"column":10,"nodeType":"45","messageId":"46","endLine":13,"endColumn":19},{"ruleId":"47","severity":1,"message":"48","line":32,"column":6,"nodeType":"49","endLine":32,"endColumn":24,"suggestions":"50"},{"ruleId":"47","severity":1,"message":"51","line":226,"column":6,"nodeType":"49","endLine":226,"endColumn":25,"suggestions":"52"},{"ruleId":"53","severity":1,"message":"54","line":236,"column":9,"nodeType":"55","messageId":"56","endLine":318,"endColumn":8},"no-unused-vars","'timeoutId' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleSearchBox'. Either include it or remove the dependency array.","ArrayExpression",["57"],"React Hook useEffect has a missing dependency: 'RcdMsg'. Either include it or remove the dependency array.",["58"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase",{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},"Update the dependencies array to be: [handleSearchBox, isTimeoutRunning]",{"range":"63","text":"64"},"Update the dependencies array to be: [ChargerID, RcdMsg, socket]",{"range":"65","text":"66"},[1207,1225],"[handleSearchBox, isTimeoutRunning]",[7836,7855],"[ChargerID, RcdMsg, socket]"]
>>>>>>> 0058ecbda69e8d191cbba10cdac3846f8aa4f848
